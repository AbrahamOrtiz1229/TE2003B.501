# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'repcont.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pygame, eyed3

import pyrebase

import serial
from board import SCL, SDA
import busio
from PIL import Image, ImageDraw, ImageFont
import adafruit_ssd1306
import time

#SE declaran para puerto 12c
i2c = busio.I2C(SCL, SDA)
disp = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)

#crea pantalla en negro
disp.fill(0)
disp.show()
width = disp.width
height = disp.height

#Se pone la información de la base de datos
config = {
  "apiKey": "AIzaSyBz72ASb-I7Ng50LqE4t8t4kRFO0uj3M5U",
  "authDomain": "krakatoa-2b78a.firebaseapp.com",
  "databaseURL": "https://krakatoa-2b78a-default-rtdb.firebaseio.com",
  "projectId": "krakatoa-2b78a",
  "storageBucket": "krakatoa-2b78a.appspot.com",
  "messagingSenderId": "287696897655",
  "appId": "1:287696897655:web:9668c9ea29da93864c6872",
  "measurementId": "G-8EDMD46GG6"
}

#crea la autenticacioon
firebase = pyrebase.initialize_app(config)
#se accesa a la base de datos en Firebase
db = firebase.database()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(821, 396)
        MainWindow.setStyleSheet("background-image: url('/home/hectorsalamanca/repcont/back.png'); background-color: white;")
        icon0 = QtGui.QIcon('/home/hectorsalamanca/repcont/icon_da.png')
        MainWindow.setWindowIcon(icon0)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pause = QtWidgets.QPushButton(self.centralwidget)
        self.pause.setGeometry(QtCore.QRect(150, 280, 71, 71))
        self.pause.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/pause.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pause.setIcon(icon)
        self.pause.setIconSize(QtCore.QSize(80, 80))
        self.pause.setObjectName("pause")
        self.unpause = QtWidgets.QPushButton(self.centralwidget)
        self.unpause.setGeometry(QtCore.QRect(230, 280, 71, 71))
        self.unpause.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/unpause.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.unpause.setIcon(icon8)
        self.unpause.setIconSize(QtCore.QSize(80, 80))
        self.unpause.setObjectName("unpause")
        self.stop = QtWidgets.QPushButton(self.centralwidget)
        self.stop.setGeometry(QtCore.QRect(310, 280, 71, 71))
        self.stop.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/stop_bttn.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.stop.setIcon(icon1)
        self.stop.setIconSize(QtCore.QSize(60, 60))
        self.stop.setObjectName("stop")
        self.play = QtWidgets.QPushButton(self.centralwidget)
        self.play.setGeometry(QtCore.QRect(70, 280, 71, 71))
        self.play.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/play.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.play.setIcon(icon2)
        self.play.setIconSize(QtCore.QSize(60, 60))
        self.play.setObjectName("play")
        self.list_music = QtWidgets.QTextBrowser(self.centralwidget)
        self.list_music.setGeometry(QtCore.QRect(87, 80, 282, 191))
        self.list_music.setObjectName("list_music")
        text_style = "QTextBrowser { color: black; font-weight: bold;}"
        self.list_music.setStyleSheet(text_style)
        self.list_titile = QtWidgets.QTextEdit(self.centralwidget)
        self.list_titile.setGeometry(QtCore.QRect(136, 40, 191, 31))
        self.list_titile.setObjectName("list_titile")
        self.list_titile.setReadOnly(True)
        self.list_titile.setStyleSheet("background-color: white; color: white;")
        self.list_titile.append(f"<p style = 'color:white'>")
        self.forward_bttn = QtWidgets.QPushButton(self.centralwidget)
        self.forward_bttn.setGeometry(QtCore.QRect(560, 100, 71, 71))
        self.forward_bttn.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/forward.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.forward_bttn.setIcon(icon3)
        self.forward_bttn.setIconSize(QtCore.QSize(60, 60))
        self.forward_bttn.setObjectName("forward_bttn")
        self.left_bttn = QtWidgets.QPushButton(self.centralwidget)
        self.left_bttn.setGeometry(QtCore.QRect(480, 180, 71, 71))
        self.left_bttn.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/left.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.left_bttn.setIcon(icon4)
        self.left_bttn.setIconSize(QtCore.QSize(60, 60))
        self.left_bttn.setObjectName("left_bttn")
        self.stop_bttn = QtWidgets.QPushButton(self.centralwidget)
        self.stop_bttn.setGeometry(QtCore.QRect(560, 180, 71, 71))
        self.stop_bttn.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/stop.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.stop_bttn.setIcon(icon7)
        self.stop_bttn.setIconSize(QtCore.QSize(80, 80))
        self.stop_bttn.setObjectName("stop_bttn")
        self.right_bttn = QtWidgets.QPushButton(self.centralwidget)
        self.right_bttn.setGeometry(QtCore.QRect(640, 180, 71, 71))
        self.right_bttn.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/right.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.right_bttn.setIcon(icon5)
        self.right_bttn.setIconSize(QtCore.QSize(60, 60))
        self.right_bttn.setObjectName("right_bttn")
        self.right_bttn.setStyleSheet("right_bttn.rgb(255, 255, 255)")
        self.backward_bttn = QtWidgets.QPushButton(self.centralwidget)
        self.backward_bttn.setGeometry(QtCore.QRect(560, 260, 71, 71))
        self.backward_bttn.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap('/home/hectorsalamanca/repcont/backward.png'), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.backward_bttn.setIcon(icon6)
        self.backward_bttn.setIconSize(QtCore.QSize(60, 60))
        self.backward_bttn.setObjectName("backward_bttn")
        self.list_titile_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.list_titile_2.setGeometry(QtCore.QRect(500, 40, 191, 31))
        self.list_titile_2.setObjectName("list_titile_2")
        self.list_titile_2.setReadOnly(True)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Reproductor / Control [mBot Mega]"))
        self.list_titile.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600; color:#ffffff;\">Lista de reproducción</span></p></body></html>"))
        self.list_titile_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600; color:#ffffff;\">Control del Mbot Mega</span></p></body></html>"))


       #Poner lista de canciones
        for i in range(1, 101):
            nombre = str(i) + ".mp3"
            audiofile = eyed3.load(nombre)
            title = str(i) + ". " + str(audiofile.tag.title)
            self.list_music.append(title)


        #Activar funciones para reproducir cancion
        self.play.clicked.connect(self.empezar)
        self.pause.clicked.connect(self.detener_continuar)
        self.unpause.clicked.connect(self.continuar)
        self.stop.clicked.connect(self.terminar)

        #Activar botones del control de robot
        self.backward_bttn.clicked.connect(self.atras)
        self.left_bttn.clicked.connect(self.izquierda)
        self.right_bttn.clicked.connect(self.derecha)
        self.forward_bttn.clicked.connect(self.enfrente)
        self.stop_bttn.clicked.connect(self.detener)





    def stream_handler(message):
        numLec = db.child("music").child("num").get().val()        
        
        
        if (numLec > 0) and (numLec < 101): 
             num = str(numLec)   
             nombre = num + ".mp3"
             pygame.mixer.init()  # Starts the mixer
             pygame.mixer.music.load(nombre)
             pygame.mixer.music.play()
             audiofile = eyed3.load(nombre)
             
             #DEsplegar en oled 
        
             nombre= str(audiofile.tag.title)
             autor = str(audiofile.tag.artist)
             album = str(audiofile.tag.album)
             image = Image.new('1', (width, height))

             draw = ImageDraw.Draw(image)
             font = ImageFont.load_default()
             draw.line((5, 0, 123, 0), fill=255)
             draw.text((6, 7), f'{nombre}', font=font, fill=255)
             draw.text((18, 20),'================', fill=255)
             draw.text((6, 35), f'{autor}', font=font, fill=255)
             draw.text((6,47), f'{album}', font=font, fill=255)
             draw.line((5, 63, 123, 63), fill=255)
             disp.image(image)
             disp.show()
        
        else:
             pygame.mixer.init() 
             image = Image.new('1', (width, height))
             draw = ImageDraw.Draw(image)
             font = ImageFont.load_default()
             draw.line((2, 0, 126, 0), fill=255)
             draw.text((30, 7),'La lista de', fill=255)
             draw.text((12, 17),'reproduccion va de', fill=255)
             draw.text((9, 29),'0 a 100, conmpanero', fill=255)
             draw.line((2, 49, 126, 49), fill=255)
             disp.image(image)
             disp.show()
             if (pygame.mixer.music.get_busy() == True):
                     pygame.mixer.music.stop()
                     
    my_stream = db.child("music").stream(stream_handler)
    
    

#Funciones reproducir música
    def empezar(self):
        numLec = db.child("music").child("num").get().val()        
        
        
        if (numLec > 0) and (numLec < 101): 
             num = str(numLec)   
             nombre = num + ".mp3"
             pygame.mixer.init()  # Starts the mixer
             pygame.mixer.music.load(nombre)
             pygame.mixer.music.play()
             audiofile = eyed3.load(nombre)
             
             #DEsplegar en oled 
        
             nombre= str(audiofile.tag.title)
             autor = str(audiofile.tag.artist)
             album = str(audiofile.tag.album)
             image = Image.new('1', (width, height))

             draw = ImageDraw.Draw(image)
             font = ImageFont.load_default()
             draw.line((5, 0, 123, 0), fill=255)
             draw.text((6, 7), f'{nombre}', font=font, fill=255)
             draw.text((18, 20),'================', fill=255)
             draw.text((6, 35), f'{autor}', font=font, fill=255)
             draw.text((6,47), f'{album}', font=font, fill=255)
             draw.line((5, 63, 123, 63), fill=255)
             disp.image(image)
             disp.show()
        
        else:
             pygame.mixer.init() 
             image = Image.new('1', (width, height))
             draw = ImageDraw.Draw(image)
             font = ImageFont.load_default()
             draw.line((2, 0, 126, 0), fill=255)
             draw.text((30, 7),'La lista de', fill=255)
             draw.text((12, 17),'reproduccion va de', fill=255)
             draw.text((9, 29),'0 a 100, conmpanero', fill=255)
             draw.line((2, 49, 126, 49), fill=255)
             disp.image(image)
             disp.show()
             if (pygame.mixer.music.get_busy() == True):
                     pygame.mixer.music.stop()


    def detener_continuar(self):
        pygame.mixer.music.pause()

        
    def continuar(self):
        pygame.mixer.music.unpause()
        

    def terminar(self):
        pygame.mixer.music.stop()

#Funciones mandar movimientos del robot
    def atras(self):
        db.child("movimiento").update({"mover": "b"})

    def izquierda(self):
        db.child("movimiento").update({"mover": "l"})

    def derecha(self):
        db.child("movimiento").update({"mover": "r"})

    def enfrente(self):
        db.child("movimiento").update({"mover": "f"})

    def detener(self):
        db.child("movimiento").update({"mover": "s"})

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
